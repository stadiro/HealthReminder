from aiogram import F, types, Router
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.filters.callback_data import CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext


from keyboards import replies
from keyboards.replies import MyCallback
user_private_router = Router()


class AddReminder_pills(StatesGroup):
    name = State()
    freq = State()
    extra_inf = State()

    texts = {
        'AddReminder_pills:name': 'üíä–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
        'AddReminder_pills:freq': 'üóìÔ∏è–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–µ–º–∞',
        'AddReminder_pills:extra_inf': '‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
    }

@user_private_router.message(CommandStart())
async def start(message: types.Message):
    name = message.from_user.full_name
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}, —ç—Ç–æ –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏", reply_markup=replies.start_kb())


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "cancel"))
@user_private_router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.clear()
    await query.message.edit_text("‚ùóÔ∏è<b>–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã</b>", reply_markup=replies.start_kb())
    await query.answer("‚ùóÔ∏è –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùóÔ∏è")


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "back"))
@user_private_router.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()

    if cur_state == AddReminder_pills.name:
        await query.message.edit_text("‚ùóÔ∏è<b>–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç</b>\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
        await query.answer("‚ùóÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç.Ô∏è\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
        return

    prev = None
    for step in AddReminder_pills.__all_states__:
        if step == cur_state:
            await state.set_state(prev)
            await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
            if step == AddReminder_pills.freq:
                await query.message.edit_text(
                    f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminder_pills.texts[prev.state]}", reply_markup=replies.cancel_kb()
                )
            else:
                await query.message.edit_text(
                    f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminder_pills.texts[prev.state]}", reply_markup=replies.back_cancel_kb()
                )
            return
        prev = step


@user_private_router.callback_query(StateFilter(None), MyCallback.filter(F.name == "create"))
async def create(query: CallbackQuery):
    await query.message.answer("–ö–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?", reply_markup=replies.create_kb())


@user_private_router.callback_query(StateFilter(None), MyCallback.filter(F.name == "doctor"))
async def doctor(query: CallbackQuery, state: FSMContext):
    await query.message.answer("–ó–∞–ø–∏—Å—å –∫–æ –≤—Ä–∞—á—É. –ü–æ–∫–∞ —á—Ç–æ –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å")

''' 
 –•–≠–ù–î–õ–ï–†–´ –ù–ê –õ–ï–ö–ê–†–°–¢–í–ê
'''
@user_private_router.callback_query(StateFilter(None), MyCallback.filter(F.name == "pills"))
async def pills(query: CallbackQuery, state: FSMContext):
    await query.message.answer("üíä–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", reply_markup=replies.cancel_kb())
    await state.set_state(AddReminder_pills.name)


@user_private_router.message(AddReminder_pills.name, F.text)
async def pill_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üóìÔ∏è–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–µ–º–∞", reply_markup=replies.back_cancel_kb())
    await state.set_state(AddReminder_pills.freq)


@user_private_router.message(AddReminder_pills.name)
async def pill_name(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.cancel_kb())



@user_private_router.message(AddReminder_pills.freq, F.text)
async def pill_freq(message: types.Message, state: FSMContext):
    await state.update_data(freq=message.text)
    await message.answer("‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.back_cancel_kb())
    await state.set_state(AddReminder_pills.extra_inf)


@user_private_router.message(AddReminder_pills.freq)
async def pill_name(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º ", reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminder_pills.extra_inf, F.text)
async def pill_extra(message: types.Message, state: FSMContext):
    await state.update_data(extra_inf=message.text)
    await message.answer("‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=replies.start_kb())
    data = await state.get_data()
    await message.answer(str(data))
    await state.clear()





@user_private_router.message(F.text)  # –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –ª–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç
async def stuff(message: types.Message):
    await message.answer("–ú–∞–≥–∞ —Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ")

