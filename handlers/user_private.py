from aiogram import F, types, Router
from aiogram.filters import CommandStart, StateFilter
from aiogram.filters.callback_data import CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_doctor_remind, orm_get_reminds, orm_delete_remind, orm_get_remind
from inline_cal.common import get_user_locale
from inline_cal.simple_calendar import SimpleCalendar, SimpleCalAct
from inline_cal.schemas import SimpleCalendarCallback

import geopy
from timezonefinder import TimezoneFinder
import pytz

from keyboards import replies
from keyboards.replies import MyCallback
user_private_router = Router()


class TimeZoneSet(StatesGroup):
    city = State()
    wait_for_remind = State()


class AddReminderDoctor(StatesGroup):
    speciality = State()
    name_clinic = State()
    date = State()
    time = State()
    cabinet = State()
    extra_inf_doctor = State()
    chat_id = State()
    sec_time = State()

    remind_for_change = None

    texts = {
        'AddReminderDoctor:speciality': 'ü©∫–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞',
        'AddReminderDoctor:name_clinic': 'üè•–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏',
        'AddReminderDoctor:date': 'üóì–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∏—ë–º–∞',
        'AddReminderDoctor:time': 'üïí–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞',
        'AddReminderDoctor:cabinet': 'üö™–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞',
        'AddReminderDoctor:extra_inf_doctor': '‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –§–ò–û –≤—Ä–∞—á–∞,'
        '–∞–¥—Ä–µ—Å –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏, –∏ –ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
    }


class AddReminderPills(StatesGroup):
    name = State()
    freq_days = State()
    day_start = State()
    freq_per_day = State()
    first_take = State()
    sec_take = State()
    third_take = State()
    four_take = State()
    five_take = State()
    six_take = State()
    extra_inf = State()

    texts = {
        'AddReminderPills:name': 'üíä–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
        'AddReminderPills:freq_days': 'üóìÔ∏è–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ',
        'AddReminderPills:day_start': 'üóìÔ∏è–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞',
        'AddReminderPills:freq_per_day': 'üî¢–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ',
        'AddReminderPills:first_take': '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 1 –ø—Ä–∏–µ–º–∞',
        'AddReminderPills:sec_take': '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 2 –ø—Ä–∏–µ–º–∞',
        'AddReminderPills:third_take': '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 3 –ø—Ä–∏–µ–º–∞',
        'AddReminderPills:four_take': '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 4 –ø—Ä–∏–µ–º–∞',
        'AddReminderPills:five_take': '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 5 –ø—Ä–∏–µ–º–∞',
        'AddReminderPills:six_take': '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 6 –ø—Ä–∏–µ–º–∞',
        'AddReminderPills:extra_inf': '‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
    }


@user_private_router.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    cur_state = await state.get_state()
    if cur_state is None or cur_state == TimeZoneSet.wait_for_remind:
        name = message.from_user.full_name
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}, —ç—Ç–æ –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏", reply_markup=replies.start_kb())
    else:
        await message.answer("‚ùóÔ∏è–í—ã <b>–Ω–µ –º–æ–∂–µ—Ç–µ</b> –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ‚ùóÔ∏è"
                             "\n –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "start"))
async def back_to_start(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=replies.start_kb())


@user_private_router.callback_query(MyCallback.filter(F.name == "timezone"))
async def get_city_timezone(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text("–î–ª—è –∑–∞–¥–∞–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥", reply_markup=replies.cancel_kb())
    await state.set_state(TimeZoneSet.city)


@user_private_router.message(StateFilter(TimeZoneSet.city), F.text)
async def get_timezone(message: types.Message, state: FSMContext):
    text = message.text
    if text.isalpha():
        await state.update_data(city=message.text)
        city = message.text
        geo = geopy.geocoders.Nominatim(user_agent="healthtest1bot")
        location = geo.geocode(city)  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç
        if location is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. "
                                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.",
                                 reply_markup=replies.cancel_kb())
        else:
            tf = TimezoneFinder()
            timezone_str = tf.timezone_at(lng=location.longitude, lat=location.latitude)  # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            tz = pytz.timezone(timezone_str)
            tz_info = datetime.now(tz=tz).strftime("%z")  # –ø–æ–ª—É—á–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            tz_info = tz_info[0:3]+":"+tz_info[3:]  # –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É ¬±–ß–ß:–ú–ú
            await message.answer(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {timezone_str} ({tz_info} –æ—Ç GMT)",
                                 reply_markup=replies.start_kb())
        # –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –ë–î
            await state.clear()
            return timezone_str
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>")


@user_private_router.message(TimeZoneSet.city)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>")


@user_private_router.message(F.text.casefold() == "—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
async def get_user_time(message: types.Message, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    timezone_str = user_data.get("timezone")
    if timezone_str:
        tz = pytz.timezone(timezone_str)
        user_time = datetime.now(tz=tz)
        await message.answer("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –≤–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ: %s" % user_time.strftime("%H:%M:%S"))
    else:
        await message.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


@user_private_router.callback_query(SimpleCalendarCallback.filter(F.act == SimpleCalAct.cancel))
async def process_selection(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.clear()
    await query.message.edit_text("‚ùóÔ∏è<b>–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã</b>", reply_markup=replies.start_kb())
    await query.answer("‚ùóÔ∏è –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùóÔ∏è")


@user_private_router.callback_query(SimpleCalendarCallback.filter(F.act == SimpleCalAct.back))
async def process_selection(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()
    if cur_state in AddReminderDoctor.__all_states__:
        prev = None
        for step in AddReminderDoctor.__all_states__:
            if step == cur_state:
                await state.set_state(prev)
                await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
                await query.message.edit_text(
                    f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderDoctor.texts[prev.state]}",
                    reply_markup=replies.back_cancel_kb()
                )
            prev = step
    elif cur_state in AddReminderPills.__all_states__:
        prev = None
        for step in AddReminderPills.__all_states__:
            if step == cur_state:
                await state.set_state(prev)
                await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
                await query.message.edit_text(
                    f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderPills.texts[prev.state]}",
                    reply_markup=replies.back_cancel_kb()
                )
            prev = step

@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "cancel"))
async def cancel(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.clear()
    await query.message.edit_text("‚ùóÔ∏è<b>–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã</b>", reply_markup=replies.start_kb())
    await query.answer("‚ùóÔ∏è –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùóÔ∏è")


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "back"))
async def back(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()
    if cur_state in AddReminderPills.__all_states__:
        if cur_state == AddReminderPills.name:
            await query.message.edit_text("‚ùóÔ∏è<b>–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç</b>\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            await query.answer("‚ùóÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç.Ô∏è\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            return

        prev = None
        for step in AddReminderPills.__all_states__:
            if step == cur_state:
                if cur_state == AddReminderPills.extra_inf:
                    data = await state.get_data()
                    count = data['freq_per_day']
                    takes_time = data['first_take']
                    takes_time.pop()
                    if count == 1:
                        await state.set_state(AddReminderPills.first_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n"
                            f"{AddReminderPills.texts[AddReminderPills.first_take]}", reply_markup=replies.cancel_kb())
                    elif count == 2:
                        await state.set_state(AddReminderPills.sec_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n"
                            f"{AddReminderPills.texts[AddReminderPills.sec_take]}", reply_markup=replies.cancel_kb())
                    elif count == 3:
                        await state.set_state(AddReminderPills.third_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n"
                            f"{AddReminderPills.texts[AddReminderPills.third_take]}", reply_markup=replies.cancel_kb())
                    elif count == 4:
                        await state.set_state(AddReminderPills.four_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n"
                            f"{AddReminderPills.texts[AddReminderPills.four_take]}", reply_markup=replies.cancel_kb())
                    elif count == 5:
                        await state.set_state(AddReminderPills.five_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n"
                            f"{AddReminderPills.texts[AddReminderPills.five_take]}", reply_markup=replies.cancel_kb())
                    elif count == 6:
                        await state.set_state(AddReminderPills.six_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n"
                            f"{AddReminderPills.texts[AddReminderPills.six_take]}", reply_markup=replies.cancel_kb())
                else:
                    await state.set_state(prev)
                    await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
                    if step == AddReminderPills.freq_days:
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderPills.texts[prev.state]}",
                            reply_markup=replies.cancel_kb())
                    elif step == AddReminderPills.freq_per_day:
                        await query.message.edit_text(f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderPills.texts[prev.state]}",
                                                      reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar())
                    else:
                        if (cur_state == AddReminderPills.sec_take or cur_state == AddReminderPills.third_take or
                                cur_state == AddReminderPills.four_take or cur_state == AddReminderPills.five_take or
                                cur_state == AddReminderPills.six_take):
                            data = await state.get_data()
                            takes_time = data['first_take']
                            takes_time.pop()
                            await state.update_data(first_take=takes_time)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderPills.texts[prev.state]}",
                            reply_markup=replies.back_cancel_kb())
                    return
            prev = step
    else:
        if cur_state == AddReminderDoctor.speciality:
            await query.message.edit_text("‚ùóÔ∏è<b>–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç</b>\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            await query.answer("‚ùóÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç.Ô∏è\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            return

        prev = None
        for step in AddReminderDoctor.__all_states__:
            if step == cur_state:
                await state.set_state(prev)
                await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
                if step == AddReminderDoctor.name_clinic:
                    await query.message.edit_text(
                        f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderDoctor.texts[prev.state]}",
                        reply_markup=replies.cancel_kb()
                    )
                elif step == AddReminderDoctor.time:
                    await query.message.edit_text(
                        f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderDoctor.texts[prev.state]}",
                        reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar()
                    )
                else:
                    await query.message.edit_text(
                        f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderDoctor.texts[prev.state]}",
                        reply_markup=replies.back_cancel_kb()
                    )
                return
            prev = step


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "skip"))
async def cancel(query: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    cur_state = await state.get_state()
    if cur_state == AddReminderPills.extra_inf:
        await state.update_data(extra_inf=str("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç"))
        await query.message.edit_text("‚ùó–í–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω\n‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
                                      reply_markup=replies.start_kb())
        data = await state.get_data()
        await query.message.answer(str(data))
        await state.clear()
    elif cur_state == AddReminderDoctor.extra_inf_doctor:
        await state.update_data(extra_inf_doctor=str("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç"))
        try:
            await state.update_data(chat_id=query.message.chat.id)
            data = await state.get_data()
            await orm_doctor_remind(session, data)
            await query.message.edit_text("‚ùó–í–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω\n‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
                                          reply_markup=replies.start_kb())
            await state.clear()
        except Exception as e:
            await query.message.answer(f"–û—à–∏–±–∫–∞: \n{str(e)}\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                                       reply_markup=replies.start_kb())
            await state.clear()
    else:
        await query.message.answer("–≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ —Å–ª—É—á–∏—Ç—å—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "look"))
async def reminds_list(query: CallbackQuery, session: AsyncSession):
    await query.message.delete()
    await query.message.answer("‚ùó–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                               reply_markup=replies.back_only_for_look_kb())
    await query.answer("‚ùó–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É")
    for remind in await orm_get_reminds(session):
        if remind.chat_id == query.message.chat.id:
            date = remind.date.strftime(f"%d.%m.%Y")
            time = remind.date.strftime(f"%H:%M")
            await query.message.answer(f"<strong>{remind.speciality}</strong>\n{remind.name_clinic}\n<strong>{date} –≤ "
                                       f"{time}</strong> –≤ –∫–∞–±–∏–Ω–µ—Ç–µ {remind.cabinet}\n{remind.extra_inf_doctor}",
                                       reply_markup=replies.get_btns(btns={
                                           '–ò–∑–º–µ–Ω–∏—Ç—å üñã': f'change_{remind.id}',
                                           '–£–¥–∞–ª–∏—Ç—å üöÆ': f'delete_{remind.id}'}))


@user_private_router.callback_query(F.data.startswith('delete_'))
async def delete_remind(query: types.CallbackQuery, session: AsyncSession):
    remind_id = query.data.split("_")[-1]
    await orm_delete_remind(session, int(remind_id))
    await query.message.answer("‚ùó–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", reply_markup=replies.start_kb()  )
    await query.answer("‚ùó–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")


@user_private_router.callback_query(StateFilter(None), F.data.startswith('change_'))
async def change_remind(query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    remind_id = query.data.split("_")[-1]
    remind_for_change = await orm_get_remind(session, int(remind_id))
    AddReminderDoctor.remind_for_change = remind_for_change
    await query.answer("‚ùó–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    await query.message.answer("‚ùó–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                               reply_markup=replies.get_btns(btns={
                                   'ü©∫C–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞': f'speciality_',
                                   'üè•–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏': f'name_clinic_',
                                   'üóì–î–µ–Ω—å –ø—Ä–∏—ë–º–∞': f'date_',
                                   'üïí–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞': f'time_',
                                   'üö™–ö–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞': f'cabinet_',
                                   '‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è': f'extra_inf_doctor_'})
                               )
    await state.set_state(AddReminderDoctor.sec_time)


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "create"))
async def create(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer("–ö–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?", reply_markup=replies.create_kb())


''' 
 –•–≠–ù–î–õ–ï–†–´ –ù–ê –ü–†–ò–Å–ú -----------------------------------------------------------------------------------------------------
'''


@user_private_router.callback_query(StateFilter(None), MyCallback.filter(F.name == "doctor"))
async def doctor(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text("üñãÔ∏è–ó–∞–ø–∏—Å—å –∫–æ –≤—Ä–∞—á—É\n ü©∫–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞", reply_markup=replies.cancel_kb())
    await state.set_state(AddReminderDoctor.speciality)


@user_private_router.message(StateFilter(AddReminderDoctor.speciality), F.text)
async def doctor_spec(message: types.Message, state: FSMContext):
    await state.update_data(speciality=message.text)
    await message.answer("üè•–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏", reply_markup=replies.back_cancel_kb())
    await state.set_state(AddReminderDoctor.name_clinic)


@user_private_router.message(AddReminderDoctor.speciality)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.cancel_kb())


@user_private_router.message(StateFilter(AddReminderDoctor.name_clinic), F.text)
async def doctor_clinic(message: types.Message, state: FSMContext):
    await state.update_data(name_clinic=message.text)
    await message.answer("üóì–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∏—ë–º–∞",
                         reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar())
    await state.set_state(AddReminderDoctor.date)


@user_private_router.message(AddReminderDoctor.name_clinic)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.callback_query(StateFilter(AddReminderDoctor.date), SimpleCalendarCallback.filter())
async def doctor_date(query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    calendar = SimpleCalendar(
        locale=await get_user_locale(query.from_user), show_alerts=True
    )
    today_date = datetime.now()
    cur_year = int(today_date.strftime("%Y"))
    cur_month = int(today_date.strftime("%m"))
    cur_day = int(today_date.strftime("%d"))
    calendar.set_dates_range(datetime(cur_year, cur_month, cur_day), datetime(cur_year+1, 12, 31))
    selected, chosen_date = await calendar.process_selection(query, callback_data)
    if selected:
        await query.message.edit_text(f'üóì–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∏—ë–º–∞\n‚ùó<b>–í—ã —É–∫–∞–∑–∞–ª–∏ {chosen_date.strftime(f"%d.%m.%Y")}</b>')

        await state.update_data(date=chosen_date)  # .strftime(f"%d.%m.%Y")
        await query.message.answer("üïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞\n‚ùó–í–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"
                                   "\n–ù–∞–ø—Ä–∏–º–µ—Ä, 11:30, 7:30, 0:30", reply_markup=replies.back_cancel_kb())
        await state.set_state(AddReminderDoctor.time)
    return chosen_date


@user_private_router.message(AddReminderDoctor.date)
async def doctor_date_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É <i>–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.message(StateFilter(AddReminderDoctor.time), F.text)
async def doctor_cabinet(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(4)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            state_date = await state.get_data()
            date = state_date['date']
            current_datetime = datetime.now()
            current_time = current_datetime.strftime(f"%H:%M")
            current_date = current_datetime.strftime(f"%d/%m/%Y")
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M').time()
                data = await state.get_data()
                date = data["date"]
                date_and_time = datetime.combine(date, chosen_time)
                first_remind = date_and_time - timedelta(hours=12)
                second_remind = date_and_time - timedelta(hours=2)
                if date == current_date:
                    if pre_time.strftime(f"%H") < current_datetime.strftime(f"%H"):
                        await message.answer(
                            f"‚ùó–í—ã —É–∫–∞–∑–∞–ª–∏ <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ</b> –≤—Ä–µ–º—è\n<b>–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ {current_time}</b>"
                            f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
                    elif pre_time.strftime(f"%H") == current_datetime.strftime(f"%H"):
                        if pre_time.strftime(f"%M") <= current_datetime.strftime(f"%M"):
                            await message.answer(
                                f"‚ùó–í—ã —É–∫–∞–∑–∞–ª–∏ <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ</b> –≤—Ä–µ–º—è\n<b>–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ {current_time}</b>"
                                f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
                        else:
                            await state.update_data(date=date_and_time)
                            await state.update_data(time=first_remind)
                            await state.update_data(sec_time=second_remind)
                            await message.answer("üö™–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞", reply_markup=replies.back_cancel_kb())
                            await state.set_state(AddReminderDoctor.cabinet)
                    else:
                        await state.update_data(date=date_and_time)
                        await state.update_data(time=first_remind)
                        await state.update_data(sec_time=second_remind)
                        await message.answer("üö™–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞", reply_markup=replies.back_cancel_kb())
                        await state.set_state(AddReminderDoctor.cabinet)
                else:
                    await state.update_data(date=date_and_time)
                    await state.update_data(time=first_remind)
                    await state.update_data(sec_time=second_remind)
                    await message.answer("üö™–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞", reply_markup=replies.back_cancel_kb())
                    await state.set_state(AddReminderDoctor.cabinet)
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderDoctor.time)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.message(StateFilter(AddReminderDoctor.cabinet), F.text)
async def doctor_cabinet(message: types.Message, state: FSMContext):
    await state.update_data(cabinet=message.text)
    await message.answer(
        "‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –§–ò–û –≤—Ä–∞—á–∞, –∞–¥—Ä–µ—Å –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏"
        ", –∏ –ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
    await state.set_state(AddReminderDoctor.extra_inf_doctor)


@user_private_router.message(AddReminderDoctor.cabinet)
async def doctor_cabinet_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.message(StateFilter(AddReminderDoctor.extra_inf_doctor), F.text)
async def doctor_extra(message: types.Message, state: FSMContext, session: AsyncSession):

    await state.update_data(extra_inf_doctor=message.text)
    try:
        await state.update_data(chat_id=message.chat.id)
        data = await state.get_data()
        await orm_doctor_remind(session, data)
        await message.answer("‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=replies.start_kb())
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: \n{str(e)}\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                             reply_markup=replies.start_kb())
        await state.clear()


@user_private_router.message(AddReminderDoctor.extra_inf_doctor)
async def doctor_extra_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.back_cancel_kb())


''' 
 –•–≠–ù–î–õ–ï–†–´ –ù–ê –õ–ï–ö–ê–†–°–¢–í–ê--------------------------------------------------------------------------------------------------
'''


@user_private_router.callback_query(StateFilter(None), MyCallback.filter(F.name == "pills"))
async def pills(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "üñãÔ∏è–ü—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤\nüíä–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", reply_markup=replies.cancel_kb())
    await state.set_state(AddReminderPills.name)


@user_private_router.message(AddReminderPills.name, F.text)
async def pill_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üóìÔ∏è–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", reply_markup=replies.back_cancel_kb())
    await state.set_state(AddReminderPills.freq_days)


@user_private_router.message(AddReminderPills.name)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.cancel_kb())


@user_private_router.message(AddReminderPills.freq_days, F.text)
async def pill_day_start(message: types.Message, state: FSMContext):
    mess = message.text
    if mess.isdigit():
        if 0 < int(mess) <= 7:
            await state.update_data(freq_days=int(mess))
            await message.answer("üóìÔ∏è–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞",
                                 reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar())
            await state.set_state(AddReminderPills.day_start)
        if int(mess) > 7 or int(mess) <= 0:
            await message.answer("‚ùó–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π <b>–Ω–µ –º–æ–∂–µ—Ç</b> –±—ã—Ç—å –±–æ–ª—å—à–µ 7 –∏–ª–∏ –º–µ–Ω—å—à–µ 1"
                                 "\n–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>—Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</b>",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.freq_days)
async def pill_day_start_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>—Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
                         reply_markup=replies.cancel_kb())


@user_private_router.callback_query(StateFilter(AddReminderPills.day_start), SimpleCalendarCallback.filter())
async def pill_day_start(query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    calendar = SimpleCalendar(
        locale=await get_user_locale(query.from_user), show_alerts=True
    )
    today_date = datetime.now()
    cur_year = int(today_date.strftime("%Y"))
    cur_month = int(today_date.strftime("%m"))
    cur_day = int(today_date.strftime("%d"))
    calendar.set_dates_range(datetime(cur_year, cur_month, cur_day), datetime(cur_year+1, 12, 31))
    selected, chosen_date = await calendar.process_selection(query, callback_data)
    if selected:
        await query.message.edit_text(f'üóìÔ∏è–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞\n‚ùó<b>–í—ã —É–∫–∞–∑–∞–ª–∏ {chosen_date.strftime(f"%d.%m.%Y")}</b>')
        await state.update_data(day_start=chosen_date)
        await query.message.answer("üî¢–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ",
                                   reply_markup=replies.back_cancel_kb())
        await state.set_state(AddReminderPills.freq_per_day)
    return chosen_date


@user_private_router.message(AddReminderPills.day_start)
async def pill_day_start_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É <i>–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.freq_per_day, F.text)
async def pill_freq_per_day(message: types.Message, state: FSMContext):
    mess = message.text
    if mess.isdigit():
        if 6 >= int(mess) > 0:
            await state.update_data(freq_per_day=int(message.text))
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 1 –ø—Ä–∏–µ–º–∞\n‚ùó–í–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"
                                 "\n–ù–∞–ø—Ä–∏–º–µ—Ä, 11:30, 7:30, 0:30", reply_markup=replies.back_cancel_kb())
            await state.set_state(AddReminderPills.first_take)
        if int(mess) > 6 or int(mess) <= 0:
            await message.answer("‚ùó–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –≤ –¥–µ–Ω—å <b>–Ω–µ –º–æ–∂–µ—Ç</b> –±—ã—Ç—å –±–æ–ª—å—à–µ 6 –∏–ª–∏ –º–µ–Ω—å—à–µ 1"
                                 "\n–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>—Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</b>",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.freq_per_day)
async def pill_freq_per_day_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>—Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</b>",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.first_take, F.text)
async def pill_first_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(4)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                takes_time = []
                takes_time.append(chosen_time)
                await state.update_data(first_take=takes_time)
                data = await state.get_data()
                count = data['freq_per_day']
                if count > 1:
                    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 2 –ø—Ä–∏–µ–º–∞", reply_markup=replies.back_cancel_kb())
                    await state.set_state(AddReminderPills.sec_take)
                else:
                    await message.answer("‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                    await state.set_state(AddReminderPills.extra_inf)
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.first_take)
async def pill_first_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ", reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.sec_take, F.text)
async def pill_sec_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(4)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                data = await state.get_data()
                count = data['freq_per_day']
                takes_time = data['first_take']
                hit_counter = 0
                for i in range(len(takes_time)):
                    if takes_time[i] == chosen_time:
                        hit_counter += 1
                if hit_counter == 0:
                    takes_time.append(chosen_time)
                    await message.answer(f"{takes_time}")
                    await state.update_data(first_take=takes_time)
                    if count > 2:
                        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 3 –ø—Ä–∏–µ–º–∞", reply_markup=replies.back_cancel_kb())
                        await state.set_state(AddReminderPills.third_take)
                    else:
                        await message.answer("‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                        await state.set_state(AddReminderPills.extra_inf)
                else:
                    await message.answer("‚ùó–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ <b>–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å</b> —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º,"
                                         " –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ\n–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", reply_markup=replies.back_cancel_kb())
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b>",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.sec_take)
async def pill_sec_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b>",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.third_take, F.text)
async def pill_sec_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(4)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                data = await state.get_data()
                count = data['freq_per_day']
                takes_time = data['first_take']
                hit_counter = 0
                for i in range(len(takes_time)):
                    if takes_time[i] == chosen_time:
                        hit_counter += 1
                if hit_counter == 0:
                    takes_time.append(chosen_time)
                    await message.answer(f"{takes_time}")
                    await state.update_data(first_take=takes_time)
                    if count > 3:
                        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 4 –ø—Ä–∏–µ–º–∞", reply_markup=replies.back_cancel_kb())
                        await state.set_state(AddReminderPills.four_take)
                    else:
                        await message.answer("‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                        await state.set_state(AddReminderPills.extra_inf)
                else:
                    await message.answer("‚ùó–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ <b>–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å</b> —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º,"
                                         " –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ\n–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", reply_markup=replies.back_cancel_kb())
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.third_take)
async def pill_sec_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b>",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.four_take, F.text)
async def pill_sec_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(4)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                data = await state.get_data()
                count = data['freq_per_day']
                takes_time = data['first_take']
                hit_counter = 0
                for i in range(len(takes_time)):
                    if takes_time[i] == chosen_time:
                        hit_counter += 1
                if hit_counter == 0:
                    takes_time.append(chosen_time)
                    await state.update_data(first_take=takes_time)
                    await message.answer(f"{takes_time}")
                    if count > 4:
                        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 5 –ø—Ä–∏–µ–º–∞", reply_markup=replies.back_cancel_kb())
                        await state.set_state(AddReminderPills.five_take)
                    else:
                        await message.answer("‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                        await state.set_state(AddReminderPills.extra_inf)
                else:
                    await message.answer("‚ùó–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ <b>–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å</b> —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º,"
                                         " –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ\n–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", reply_markup=replies.back_cancel_kb())
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.four_take)
async def pill_sec_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b>",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.five_take, F.text)
async def pill_sec_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(5)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                data = await state.get_data()
                count = data['freq_per_day']
                takes_time = data['first_take']
                hit_counter = 0
                for i in range(len(takes_time)):
                    if takes_time[i] == chosen_time:
                        hit_counter += 1
                if hit_counter == 0:
                    takes_time.append(chosen_time)
                    await state.update_data(first_take=takes_time)
                    await message.answer(f"{takes_time}")
                    if count > 5:
                        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 6 –ø—Ä–∏–µ–º–∞", reply_markup=replies.back_cancel_kb())
                        await state.set_state(AddReminderPills.six_take)
                    else:
                        await message.answer("‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                        await state.set_state(AddReminderPills.extra_inf)
                else:
                    await message.answer("‚ùó–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ <b>–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å</b> —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º,"
                                         " –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ\n–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", reply_markup=replies.back_cancel_kb())
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.five_take)
async def pill_sec_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.six_take, F.text)
async def pill_sec_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(5)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                data = await state.get_data()
                takes_time = data['first_take']
                hit_counter = 0
                for i in range(len(takes_time)):
                    if takes_time[i] == chosen_time:
                        hit_counter += 1
                if hit_counter == 0:
                    takes_time.append(chosen_time)
                    await state.update_data(first_take=takes_time)
                    await message.answer(f"{takes_time}")
                    await message.answer("‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                    await state.set_state(AddReminderPills.extra_inf)
                else:
                    await message.answer("‚ùó–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ <b>–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å</b> —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º,"
                                         " –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ\n–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", reply_markup=replies.back_cancel_kb())
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.six_take)
async def pill_sec_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.extra_inf, F.text)
async def pill_extra(message: types.Message, state: FSMContext):
    await state.update_data(extra_inf=message.text)
    await message.answer("‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=replies.start_kb())
    data = await state.get_data()
    await message.answer(str(data))
    await state.clear()


@user_private_router.message(AddReminderPills.extra_inf)
async def pill_extra_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º ", reply_markup=replies.back_cancel_kb())


@user_private_router.message()  # –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –ª–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç
async def stuff(message: types.Message):
    await message.answer("–ú–∞–≥–∞ —Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ")

