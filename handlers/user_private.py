from aiogram import F, types, Router
from aiogram.filters import CommandStart, StateFilter
from aiogram.filters.callback_data import CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime, time
from inline_cal.common import get_user_locale
from inline_cal.simple_calendar import SimpleCalendar, SimpleCalAct
from inline_cal.schemas import SimpleCalendarCallback

import geopy
from timezonefinder import TimezoneFinder
import pytz


from keyboards import replies
from keyboards.replies import MyCallback
user_private_router = Router()


class AddReminderDoctor(StatesGroup):
    speciality = State()
    name_clinic = State()
    date = State()
    time = State()
    cabinet = State()
    extra_inf_doctor = State()

    texts = {
        'AddReminderDoctor:speciality': 'ü©∫–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞',
        'AddReminderDoctor:name_clinic': 'üè•–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏',
        'AddReminderDoctor:date': 'üóì–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∏—ë–º–∞',
        'AddReminderDoctor:time': 'üïí–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞',
        'AddReminderDoctor:cabinet': 'üö™–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞',
        'AddReminderDoctor:extra_inf_doctor': '‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –§–ò–û –≤—Ä–∞—á–∞,'
        '–∞–¥—Ä–µ—Å –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏, –∏ –ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
    }


class AddReminderPills(StatesGroup):
    name = State()
    freq = State()
    extra_inf = State()

    texts = {
        'AddReminderPills:name': 'üíä–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
        'AddReminderPills:freq': 'üóìÔ∏è–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–µ–º–∞',
        'AddReminderPills:extra_inf': '‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
    }

@user_private_router.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    cur_state = await state.get_state()
    if cur_state is None:
        name = message.from_user.full_name
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}, —ç—Ç–æ –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏", reply_markup=replies.start_kb())
    else:
        await message.answer("‚ùóÔ∏è–í—ã <b>–Ω–µ –º–æ–∂–µ—Ç–µ</b> –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ‚ùóÔ∏è"
                             "\n –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")


@user_private_router.message(F.text.casefold() == "—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
async def get_timezone(message: types.Message):
    city = "–ß–µ–ª—è–±–∏–Ω—Å–∫"
    geo = geopy.geocoders.Nominatim(user_agent="healthtest1bot")
    location = geo.geocode(city)  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç
    if location is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. "
                                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
    else:
        tf = TimezoneFinder()
        timezone_str = tf.timezone_at(lng=location.longitude, lat=location.latitude)  # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        tz = pytz.timezone(timezone_str)
        tz_info = datetime.now(tz=tz).strftime("%z")  # –ø–æ–ª—É—á–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        tz_info = tz_info[0:3]+":"+tz_info[3:]  # –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É ¬±–ß–ß:–ú–ú
        await message.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ %s (%s –æ—Ç GMT)." % (timezone_str, tz_info))
    # –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –ë–î
        return timezone_str


@user_private_router.callback_query(StateFilter(AddReminderDoctor.date), SimpleCalendarCallback.filter(F.act == SimpleCalAct.cancel))
async def process_selection(query: CallbackQuery, state: FSMContext) -> tuple:
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.clear()
    await query.message.edit_text("‚ùóÔ∏è<b>–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã</b>", reply_markup=replies.start_kb())
    await query.answer("‚ùóÔ∏è –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùóÔ∏è")


@user_private_router.callback_query(StateFilter(AddReminderDoctor.date), SimpleCalendarCallback.filter(F.act == SimpleCalAct.back))
async def process_selection(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()
    prev = None
    for step in AddReminderDoctor.__all_states__:
        if step == cur_state:
            await state.set_state(prev)
            await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
            await query.message.edit_text(
                f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderDoctor.texts[prev.state]}",
                reply_markup=replies.back_cancel_kb()
            )
        prev = step

@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "cancel"))
@user_private_router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.clear()
    await query.message.edit_text("‚ùóÔ∏è<b>–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã</b>", reply_markup=replies.start_kb())
    await query.answer("‚ùóÔ∏è –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùóÔ∏è")


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "back"))
@user_private_router.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()

    if cur_state in AddReminderPills.__all_states__:
        if cur_state == AddReminderPills.name:
            await query.message.edit_text("‚ùóÔ∏è<b>–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç</b>\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            await query.answer("‚ùóÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç.Ô∏è\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            return

        prev = None
        for step in AddReminderPills.__all_states__:
            if step == cur_state:
                await state.set_state(prev)
                await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
                if step == AddReminderPills.freq:
                    await query.message.edit_text(
                        f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderPills.texts[prev.state]}", reply_markup=replies.cancel_kb()
                    )
                else:
                    await query.message.edit_text(
                        f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderPills.texts[prev.state]}", reply_markup=replies.back_cancel_kb()
                    )
                return
            prev = step
    else:
        if cur_state == AddReminderDoctor.speciality:
            await query.message.edit_text("‚ùóÔ∏è<b>–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç</b>\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            await query.answer("‚ùóÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç.Ô∏è\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            return

        prev = None
        for step in AddReminderDoctor.__all_states__:
            if step == cur_state:
                await state.set_state(prev)
                await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
                if step == AddReminderDoctor.name_clinic:
                    await query.message.edit_text(
                        f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderDoctor.texts[prev.state]}",
                        reply_markup=replies.cancel_kb()
                    )
                elif step == AddReminderDoctor.time:
                    await query.message.edit_text(
                        f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderDoctor.texts[prev.state]}",
                        reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar()
                    )
                else:
                    await query.message.edit_text(
                        f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n{AddReminderDoctor.texts[prev.state]}",
                        reply_markup=replies.back_cancel_kb()
                    )
                return
            prev = step


@user_private_router.callback_query(StateFilter(None), MyCallback.filter(F.name == "create"))
async def create(query: CallbackQuery):
    await query.message.answer("–ö–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?", reply_markup=replies.create_kb())


''' 
 –•–≠–ù–î–õ–ï–†–´ –ù–ê –ü–†–ò–Å–ú
'''


@user_private_router.callback_query(StateFilter(None), MyCallback.filter(F.name == "doctor"))
async def doctor(query: CallbackQuery, state: FSMContext):
    await query.message.answer("üñãÔ∏è–ó–∞–ø–∏—Å—å –∫–æ –≤—Ä–∞—á—É\n ü©∫–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞", reply_markup=replies.cancel_kb())
    await state.set_state(AddReminderDoctor.speciality)


@user_private_router.message(StateFilter(AddReminderDoctor.speciality), F.text)
async def doctor_spec(message: types.Message, state: FSMContext):
    await state.update_data(speciality=message.text)
    await message.answer("üè•–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏", reply_markup=replies.back_cancel_kb())
    await state.set_state(AddReminderDoctor.name_clinic)


@user_private_router.message(AddReminderDoctor.speciality)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.cancel_kb())


@user_private_router.message(StateFilter(AddReminderDoctor.name_clinic), F.text)
async def doctor_clinic(message: types.Message, state: FSMContext):
    await state.update_data(name_clinic=message.text)
    await message.answer("üóì–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∏—ë–º–∞",
                         reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar())
    await state.set_state(AddReminderDoctor.date)


@user_private_router.message(AddReminderDoctor.name_clinic)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.callback_query(StateFilter(AddReminderDoctor.date), SimpleCalendarCallback.filter())
async def doctor_date(query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    calendar = SimpleCalendar(
        locale=await get_user_locale(query.from_user), show_alerts=True
    )
    today_date = datetime.now()
    cur_year = int(today_date.strftime("%Y"))
    cur_month = int(today_date.strftime("%m"))
    cur_day = int(today_date.strftime("%d"))
    calendar.set_dates_range(datetime(cur_year, cur_month, cur_day), datetime(2027, 12, 31))
    selected, chosen_date = await calendar.process_selection(query, callback_data)
    if selected:
        await query.message.edit_text(f'üóì–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∏—ë–º–∞\n‚ùó<b>–í—ã —É–∫–∞–∑–∞–ª–∏ {chosen_date.strftime(f"%d.%m.%Y")}</b>')
        await state.update_data(date=chosen_date.strftime(f"%d/%m/%Y"))
        await query.message.answer("üïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞\n‚ùó–í–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"
                                   "\n–ù–∞–ø—Ä–∏–º–µ—Ä, 11:30, 7:30, 0:30")
        await state.set_state(AddReminderDoctor.time)
    return chosen_date


@user_private_router.message(AddReminderDoctor.date)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É <i>–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.message(StateFilter(AddReminderDoctor.time), F.text)
async def doctor_cabinet(message: types.Message, state: FSMContext):
    message_text = message.text
    if message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)
        else:
            await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ <b>–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú</b>"
                                 "\n–ù–∞–ø—Ä–∏–º–µ—Ä, 11:30, 7:30, 0:30", reply_markup=replies.back_cancel_kb())

    if message_text[2] == ":":
        hours_minutes = message_text.split(":")
        chosen_hour = int(hours_minutes[0])
        chosen_minute = int(hours_minutes[1])
        state_date = await state.get_data()
        date = state_date['date']
        current_datetime = datetime.now()
        current_time = current_datetime.strftime(f"%H:%M")
        current_date = current_datetime.strftime(f"%d/%m/%Y")
        if (chosen_hour < 0) or (chosen_hour > 24):
            await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                 f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
        elif (chosen_minute < 0) or (chosen_minute > 60):
            await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                 f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
        else:
            pre_time = datetime.strptime(message_text, f"%H:%M")
            chosen_time = pre_time.strftime(f"%H:%M")
            if date == current_date:
                if pre_time.strftime(f"%H") < current_datetime.strftime(f"%H"):
                    await message.answer(
                        f"‚ùó–í—ã —É–∫–∞–∑–∞–ª–∏ <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ</b> –≤—Ä–µ–º—è\n<b>–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ {current_time}</b>"
                        f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
                elif pre_time.strftime(f"%H") == current_datetime.strftime(f"%H"):
                    if pre_time.strftime(f"%M") <= current_datetime.strftime(f"%M"):
                        await message.answer(
                            f"‚ùó–í—ã —É–∫–∞–∑–∞–ª–∏ <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ</b> –≤—Ä–µ–º—è\n<b>–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ {current_time}</b>"
                            f"\nüïí–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ", reply_markup=replies.back_cancel_kb())
                    else:
                        await state.update_data(time=chosen_time)
                        await message.answer("üö™–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞", reply_markup=replies.back_cancel_kb())
                        await state.set_state(AddReminderDoctor.cabinet)
                else:
                    await state.update_data(time=chosen_time)
                    await message.answer("üö™–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞", reply_markup=replies.back_cancel_kb())
                    await state.set_state(AddReminderDoctor.cabinet)
            else:
                await state.update_data(time=chosen_time)
                await message.answer("üö™–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞", reply_markup=replies.back_cancel_kb())
                await state.set_state(AddReminderDoctor.cabinet)


@user_private_router.message(AddReminderDoctor.time)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.message(StateFilter(AddReminderDoctor.cabinet), F.text)
async def doctor_cabinet(message: types.Message, state: FSMContext):
    await state.update_data(cabinet=message.text)
    await message.answer(
        "‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –§–ò–û –≤—Ä–∞—á–∞, –∞–¥—Ä–µ—Å –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏"
        ", –∏ –ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.back_cancel_kb())
    await state.set_state(AddReminderDoctor.extra_inf_doctor)


@user_private_router.message(AddReminderDoctor.cabinet)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.back_cancel_kb())

@user_private_router.message(StateFilter(AddReminderDoctor.extra_inf_doctor), F.text)
async def doctor_extra(message: types.Message, state: FSMContext):
    await state.update_data(extra_inf_doctor=message.text)
    await message.answer("‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=replies.start_kb())
    data = await state.get_data()
    await message.answer(str(data))
    await state.clear()


@user_private_router.message(AddReminderDoctor.extra_inf_doctor)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.back_cancel_kb())


''' 
 –•–≠–ù–î–õ–ï–†–´ –ù–ê –õ–ï–ö–ê–†–°–¢–í–ê
'''


@user_private_router.callback_query(StateFilter(None), MyCallback.filter(F.name == "pills"))
async def pills(query: CallbackQuery, state: FSMContext):
    await query.message.answer(
        "üñãÔ∏è–ü—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤\nüíä–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", reply_markup=replies.cancel_kb())
    await state.set_state(AddReminderPills.name)


@user_private_router.message(AddReminderPills.name, F.text)
async def pill_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üóìÔ∏è–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–µ–º–∞", reply_markup=replies.back_cancel_kb())
    await state.set_state(AddReminderPills.freq)


@user_private_router.message(AddReminderPills.name)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.cancel_kb())


@user_private_router.message(AddReminderPills.freq, F.text)
async def pill_freq(message: types.Message, state: FSMContext):
    await state.update_data(freq=message.text)
    await message.answer("‚ÑπÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.back_cancel_kb())
    await state.set_state(AddReminderPills.extra_inf)


@user_private_router.message(AddReminderPills.freq)
async def pill_freq_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º ", reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.extra_inf, F.text)
async def pill_extra(message: types.Message, state: FSMContext):
    await state.update_data(extra_inf=message.text)
    await message.answer("‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=replies.start_kb())
    data = await state.get_data()
    await message.answer(str(data))
    await state.clear()


@user_private_router.message(AddReminderPills.extra_inf)
async def pill_freq_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º ", reply_markup=replies.back_cancel_kb())


@user_private_router.message()  # –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –ª–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç
async def stuff(message: types.Message):
    await message.answer("–ú–∞–≥–∞ —Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ")

