import asyncio
import os

from aiogram import F, types, Router, Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.filters.callback_data import CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from dotenv import find_dotenv, load_dotenv
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
from concurrent.futures import ThreadPoolExecutor
from zoneinfo import ZoneInfo

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import UserTimezone
from database.orm_query import (orm_doctor_remind, orm_get_reminds_doctor, orm_delete_remind,
                                orm_pills_remind, orm_get_reminds_pill, orm_get_reminds_all, orm_get_remind_doctor,
                                orm_get_remind_pill)
from inline_cal.common import get_user_locale
from inline_cal.simple_calendar import SimpleCalendar, SimpleCalAct
from inline_cal.schemas import SimpleCalendarCallback

from keyboards import replies
from keyboards.replies import MyCallback
load_dotenv(find_dotenv())
bot = Bot(token=os.getenv('TOKEN'), default=DefaultBotProperties(parse_mode=ParseMode.HTML))  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∏–∫–∞
user_private_router = Router()
executor = ThreadPoolExecutor()


class AddReminderDoctor(StatesGroup):
    speciality = State()
    name_clinic = State()
    date = State()
    time = State()
    cabinet = State()
    extra_inf_doctor = State()
    chat_id = State()
    sec_time = State()

    texts = {
        'AddReminderDoctor:speciality': 'ü©∫<b>–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞</b>',
        'AddReminderDoctor:name_clinic': 'üè•<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏</b>',
        'AddReminderDoctor:date': 'üóì<b>–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞</b>',
        'AddReminderDoctor:time': 'üïí<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞</b>',
        'AddReminderDoctor:cabinet': 'üö™<b>–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞</b>',
        'AddReminderDoctor:extra_inf_doctor': '‚ÑπÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –§–ò–û'
                                              ' –≤—Ä–∞—á–∞, –∞–¥—Ä–µ—Å –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏, –∏ –ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
    }


class AddReminderPills(StatesGroup):
    name = State()
    freq_days = State()
    periodicity = State()
    interval = State()
    day_start = State()
    freq_per_day = State()
    first_take = State()
    sec_take = State()
    third_take = State()
    four_take = State()
    five_take = State()
    six_take = State()
    extra_inf = State()
    chat_id = State()

    texts = {
        'AddReminderPills:name': 'üíä<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</b>',
        'AddReminderPills:freq_days': 'üóìÔ∏è<b>–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ</b>',
        'AddReminderPills:periodicity': 'üìÖ<b>–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ?</b>',
        'AddReminderPills:interval': 'üóìÔ∏è<b>–ö–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É –¥–Ω—è–º–∏ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞?</b>',
        'AddReminderPills:day_start': 'üóìÔ∏è<b>–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞</b>',
        'AddReminderPills:freq_per_day': 'üî¢<b>–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ</b>',
        'AddReminderPills:first_take': '<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 1 –ø—Ä–∏–µ–º–∞</b>',
        'AddReminderPills:sec_take': '<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 2 –ø—Ä–∏–µ–º–∞</b>',
        'AddReminderPills:third_take': '<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 3 –ø—Ä–∏–µ–º–∞</b>',
        'AddReminderPills:four_take': '<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 4 –ø—Ä–∏–µ–º–∞</b>',
        'AddReminderPills:five_take': '<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 5 –ø—Ä–∏–µ–º–∞</b>',
        'AddReminderPills:six_take': '<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 6 –ø—Ä–∏–µ–º–∞</b>',
        'AddReminderPills:extra_inf': '‚ÑπÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>\n\n'
                                         '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, —Ç–æ, –∫–∞–∫ –µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–æ—á—É—é'
                                         ' –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
    }


async def convert_from_yekaterinburg(session, chat_id, dt):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç datetime –∏–∑ Asia/Yekaterinburg –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(select(UserTimezone).where(UserTimezone.chat_id == chat_id))
    user_timezone = result.scalars().first()

    # –ï—Å–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º Europe/Moscow
    user_tz = user_timezone.timezone if user_timezone else "Europe/Moscow"

    # –ï—Å–ª–∏ datetime –Ω–∞–∏–≤–Ω—ã–π (–±–µ–∑ tzinfo) ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=ZoneInfo("Asia/Yekaterinburg"))

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return dt.astimezone(ZoneInfo(user_tz))



async def send_current(bot: Bot, session: AsyncSession):
    print('start stream....')

    while True:
        try:
            for remind in await orm_get_reminds_all(session):
                current_datetime = datetime.now().replace(second=0, microsecond=0)
                if remind.date_time == current_datetime:
                    if remind.pills_or_doctor == 0:
                        for dc_rm in await orm_get_remind_doctor(session, int(remind.id)):
                            ch_id = dc_rm.chat_id
                            dc_rm_time = await convert_from_yekaterinburg(session, ch_id, dc_rm.date)
                            date = dc_rm_time.strftime(f"%d.%m.%Y")
                            time = dc_rm_time.strftime(f"%H:%M")
                            if remind.date_time == dc_rm.first_remind:
                                await bot.send_message(chat_id=int(ch_id), text=f"üîî<strong>–ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø—Ä–∏–µ–º —É –≤—Ä–∞—á–∞"
                                       f"</strong>üîî\n\nü©∫–í—Ä–∞—á:<b> {dc_rm.speciality}</b>\nüè•–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞:"
                                       f" {dc_rm.name_clinic}\n<b>üóì{date} –≤ {time}</b> –≤ –∫–∞–±–∏–Ω–µ—Ç–µ "
                                       f"<b>{dc_rm.cabinet}</b>\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {dc_rm.extra_inf_doctor}")
                            elif remind.date_time == dc_rm.second_remind:
                                await bot.send_message(chat_id=int(ch_id), text=f"üîî<strong>–ß–µ—Ä–µ–∑ 1 —á–∞—Å –ø—Ä–∏–µ–º —É –≤—Ä–∞—á–∞"
                                       f"</strong>üîî\n\nü©∫–í—Ä–∞—á:<b> {dc_rm.speciality}</b>\nüè•–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞:"
                                       f" {dc_rm.name_clinic}\n<b>üóì{date} –≤ {time}</b> –≤ –∫–∞–±–∏–Ω–µ—Ç–µ "
                                       f"<b>{dc_rm.cabinet}</b>\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {dc_rm.extra_inf_doctor}")
                            elif remind.date_time == dc_rm.date:
                                await bot.send_message(chat_id=int(ch_id), text=f"üîî<strong>–°–µ–π—á–∞—Å –ø—Ä–∏–µ–º —É –≤—Ä–∞—á–∞"
                                       f"</strong>üîî\n\nü©∫–í—Ä–∞—á:<b> {dc_rm.speciality}</b>\nüè•–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞:"
                                       f" {dc_rm.name_clinic}\n<b>üóì{date} –≤ {time}</b> –≤ –∫–∞–±–∏–Ω–µ—Ç–µ "
                                       f"<b>{dc_rm.cabinet}</b>\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {dc_rm.extra_inf_doctor}")
                                await orm_delete_remind(session, int(dc_rm.id))
                    elif remind.pills_or_doctor == 1:
                        for pl_rm in await orm_get_remind_pill(session, int(remind.id)):
                            ch_id = pl_rm.chat_id
                            date = pl_rm.day_start.strftime(f"%d.%m.%Y")
                            if pl_rm.freq_per_day >= 1:
                                time1 = pl_rm.first_take.strftime(f"%H:%M")
                                if pl_rm.freq_per_day >= 2:
                                    time2 = pl_rm.sec_take.strftime(f"%H:%M")
                                    if pl_rm.freq_per_day >= 3:
                                        time3 = pl_rm.third_take.strftime(f"%H:%M")
                                        if pl_rm.freq_per_day >= 4:
                                            time4 = pl_rm.four_take.strftime(f"%H:%M")
                                            if pl_rm.freq_per_day >= 5:
                                                time5 = pl_rm.five_take.strftime(f"%H:%M")
                                                if pl_rm.freq_per_day >= 6:
                                                    time6 = pl_rm.six_take.strftime(f"%H:%M")
                            if pl_rm.freq_per_day == 1:
                                await bot.send_message(chat_id=int(ch_id), text=f"üîî<strong>–ü–æ—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æüîî\n\n"
                                           f"üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {pl_rm.name}\nüóì–ü—Ä–∏–µ–º {pl_rm.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                           f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {pl_rm.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                           f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}"
                                           f"\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {pl_rm.extra_inf}")
                            elif pl_rm.freq_per_day == 2:
                                await bot.send_message(chat_id=int(ch_id), text=f"üîî<strong>–ü–æ—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æüîî\n\n"
                                           f"üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {pl_rm.name}\nüóì–ü—Ä–∏–µ–º {pl_rm.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                           f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {pl_rm.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                           f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}\n2. {time2}"
                                           f"\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {pl_rm.extra_inf}")
                            elif pl_rm.freq_per_day == 3:
                                await bot.send_message(chat_id=int(ch_id), text=f"üîî<strong>–ü–æ—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æüîî\n\n"
                                           f"üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {pl_rm.name}\nüóì–ü—Ä–∏–µ–º {pl_rm.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                           f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {pl_rm.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                           f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}\n2. {time2}\n3. {time3}"
                                           f"\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {pl_rm.extra_inf}")
                            elif pl_rm.freq_per_day == 4:
                                await bot.send_message(chat_id=int(ch_id), text=f"üîî<strong>–ü–æ—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æüîî\n\n"
                                           f"üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {pl_rm.name}\nüóì–ü—Ä–∏–µ–º {pl_rm.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                           f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {pl_rm.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                           f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}\n2. {time2}\n3. {time3}\n4. {time4}"
                                           f"\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {pl_rm.extra_inf}")
                            elif pl_rm.freq_per_day == 5:
                                await bot.send_message(chat_id=int(ch_id), text=f"üîî<strong>–ü–æ—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æüîî\n\n"
                                           f"üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {pl_rm.name}\nüóì–ü—Ä–∏–µ–º {pl_rm.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                           f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {pl_rm.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                           f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}\n2. {time2}\n3. {time3}\n4. {time4}\n5. {time5}"
                                           f"\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {pl_rm.extra_inf}")
                            elif pl_rm.freq_per_day == 6:
                                await bot.send_message(chat_id=int(ch_id), text=f"üîî<strong>–ü–æ—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æüîî\n\n"
                                           f"üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {pl_rm.name}\nüóì–ü—Ä–∏–µ–º {pl_rm.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                           f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {pl_rm.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                           f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}\n2. {time2}\n3. {time3}\n4. {time4}\n5. {time5}\n6. {time6}"
                                           f"\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {pl_rm.extra_inf}")
                            if remind.is_it_last == 1:
                                await orm_delete_remind(session, int(pl_rm.id))
            await asyncio.sleep(60)

        except Exception as e:
            print(e)
            continue


@user_private_router.message(Command("stream"))
async def start_stream(message: types.Message, session: AsyncSession):
    asyncio.create_task(send_current(bot, session))
    await message.answer("good.")


async def get_timezone(city_name: str) -> str:
    loop = asyncio.get_running_loop()
    try:
        geolocator = Nominatim(user_agent="timezone_bot")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ (–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤)
        location = await loop.run_in_executor(executor, lambda: geolocator.geocode(city_name))
        if not location:
            return None

        tf = TimezoneFinder()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        tz = await loop.run_in_executor(
            executor, lambda: tf.timezone_at(lng=location.longitude, lat=location.latitude)
        )
        return tz
    except Exception as e:
        return None

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@user_private_router.message(CommandStart())
async def start(message: types.Message, state: FSMContext, session: AsyncSession):
    cur_state = await state.get_state()
    if cur_state is not None:
        await message.answer(
            "‚ùóÔ∏è–í—ã <b>–Ω–µ –º–æ–∂–µ—Ç–µ</b> –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ‚ùóÔ∏è\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\""
        )
        return

    chat_id = str(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω –ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(select(UserTimezone).where(UserTimezone.chat_id == chat_id))
    user_timezone = result.scalars().first()
    name = message.from_user.full_name

    if not user_timezone:
        await message.answer(
            f"üëã–ü—Ä–∏–≤–µ—Ç, {name}!\n\n‚ùï–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"
        )
        await state.set_state("waiting_for_timezone")
        return

    # –ï—Å–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É–∂–µ –∑–∞–¥–∞–Ω ‚Äì –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await message.answer(
        f"üëã–ü—Ä–∏–≤–µ—Ç, {name}!\n\nü§ñ–≠—Ç–æ - –±–æ—Ç, –Ω–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É",
        reply_markup=replies.start_kb()
    )


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)
@user_private_router.message(StateFilter("waiting_for_timezone"))
async def process_timezone(message: types.Message, state: FSMContext, session: AsyncSession):
    city_name = message.text.strip()
    tz = await get_timezone(city_name)
    if not tz:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    chat_id = str(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id
    result = await session.execute(select(UserTimezone).where(UserTimezone.chat_id == chat_id))
    existing_record = result.scalars().first()
    if existing_record:
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        await session.delete(existing_record)
        await session.commit()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_user_tz = UserTimezone(chat_id=chat_id, timezone=tz)
    session.add(new_user_tz)
    await session.commit()

    # –ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    name = message.from_user.full_name
    await message.answer(
        f"üï∞–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}\n\nü§ñ–≠—Ç–æ - –±–æ—Ç, –Ω–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É",
        reply_markup=replies.start_kb()
    )
    await state.clear()


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "timezone_new"))
async def change_timezone(query: CallbackQuery, state: FSMContext, session: AsyncSession):
    chat_id = str(query.from_user.id)
    result = await session.execute(select(UserTimezone.timezone).where(UserTimezone.chat_id == chat_id))
    user_tz = result.scalar()
    await query.message.delete()
    await query.message.answer(f"üï∞–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user_tz}\n\n‚ùï–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥",
                                   reply_markup=replies.back_only_for_look_kb())
    await state.set_state("waiting_for_timezone")


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "start"))
async def back_to_start(query: CallbackQuery, state: FSMContext):
    cur_state = await state.get_state()
    if cur_state == "waiting_for_timezone":
        await state.clear()
        cur_state = None
    if cur_state is None:
        await query.message.delete()
        await query.message.answer(f"‚ùï–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=replies.start_kb())
    else:
        await query.answer("‚ùóÔ∏è–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∫–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ‚ùóÔ∏è")


@user_private_router.callback_query(SimpleCalendarCallback.filter(F.act == SimpleCalAct.cancel))
async def calendar_cancel(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.clear()
    await query.message.edit_text("‚ùóÔ∏è<b>–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã</b>", reply_markup=replies.start_kb())
    await query.answer("‚ùóÔ∏è –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùóÔ∏è")


@user_private_router.callback_query(SimpleCalendarCallback.filter(F.act == SimpleCalAct.back))
async def calendar_back(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()
    if cur_state in AddReminderDoctor.__all_states__:
        prev = None
        for step in AddReminderDoctor.__all_states__:
            if step == cur_state:
                await state.set_state(prev)
                await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
                await query.message.edit_text(
                    f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderDoctor.texts[prev.state]}",
                    reply_markup=replies.back_cancel_kb()
                )
            prev = step
    elif cur_state in AddReminderPills.__all_states__:
        data = await state.get_data()
        periodicity = data.get("periodicity")
        freq_days = int(data.get("freq_days", 0))  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç 0

        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
        if periodicity == 2:
            prev_state = AddReminderPills.interval
            await state.set_state(prev_state)
            await query.message.edit_text(
                f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev_state.state]}",
                reply_markup=replies.back_cancel_kb()
            )
        elif freq_days == 1:
            prev_state = AddReminderPills.freq_days
            await state.set_state(prev_state)
            await query.message.edit_text(
                f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev_state.state]}",
                reply_markup=replies.back_cancel_kb()
            )
        elif periodicity == 0 or periodicity == 1:
            prev_state = AddReminderPills.periodicity
            await state.set_state(prev_state)
            await query.message.edit_text(
                f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev_state.state]}",
                reply_markup=replies.repeatability_kb()
            )
        '''else:
            prev_state = None
            for step in AddReminderPills.__all_states__:
                if step == cur_state:
                    break
                prev_state = step

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        if prev_state:
            await state.set_state(prev_state)
            await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
            await query.message.edit_text(
                f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev_state.state]}",
                reply_markup=replies.repeatability_kb()
            )'''


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "cancel"))
async def cancel(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.clear()
    await query.message.edit_text("‚ùóÔ∏è<b>–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã</b>", reply_markup=replies.start_kb())
    await query.answer("‚ùóÔ∏è –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùóÔ∏è")


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "back"))
async def back(query: CallbackQuery, state: FSMContext) -> None:
    cur_state = await state.get_state()
    '''if cur_state in AddReminderPills.__all_states__:
        if cur_state == AddReminderPills.name:
            await query.message.edit_text("‚ùóÔ∏è<b>–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç</b>\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            await query.answer("‚ùóÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç.Ô∏è\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            return

        prev = None
        for step in AddReminderPills.__all_states__:
            if step == cur_state:
                if cur_state == AddReminderPills.extra_inf:
                    data = await state.get_data()
                    count = data['freq_per_day']
                    takes_time = data['first_take']
                    takes_time.pop()
                    if count == 1:
                        await state.set_state(AddReminderPills.first_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.first_take]}", reply_markup=replies.cancel_kb())
                    elif count == 2:
                        await state.set_state(AddReminderPills.sec_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.sec_take]}", reply_markup=replies.cancel_kb())
                    elif count == 3:
                        await state.set_state(AddReminderPills.third_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.third_take]}", reply_markup=replies.cancel_kb())
                    elif count == 4:
                        await state.set_state(AddReminderPills.four_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.four_take]}", reply_markup=replies.cancel_kb())
                    elif count == 5:
                        await state.set_state(AddReminderPills.five_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.five_take]}", reply_markup=replies.cancel_kb())
                    elif count == 6:
                        await state.set_state(AddReminderPills.six_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.six_take]}", reply_markup=replies.cancel_kb())
                else:
                    await state.set_state(prev)
                    await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
                    if step == AddReminderPills.freq_days:
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev.state]}",
                            reply_markup=replies.cancel_kb())
                    elif step == AddReminderPills.freq_per_day:
                        await query.message.edit_text(f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev.state]}",
                                                      reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar())
                    else:
                        if (cur_state == AddReminderPills.sec_take or cur_state == AddReminderPills.third_take or
                                cur_state == AddReminderPills.four_take or cur_state == AddReminderPills.five_take or
                                cur_state == AddReminderPills.six_take):
                            data = await state.get_data()
                            takes_time = data['first_take']
                            takes_time.pop()
                            await state.update_data(first_take=takes_time)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev.state]}",
                            reply_markup=replies.back_cancel_kb())
                    return
            prev = step'''
    if cur_state in AddReminderPills.__all_states__:
        if cur_state == AddReminderPills.name:
            await query.message.edit_text("‚ùóÔ∏è<b>–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç</b>\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            await query.answer("‚ùóÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç.Ô∏è\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            return

        prev = None
        for step in AddReminderPills.__all_states__:
            if step == cur_state:
                if cur_state == AddReminderPills.extra_inf:
                    data = await state.get_data()
                    count = data['freq_per_day']
                    takes_time = data['first_take']
                    takes_time.pop()
                    if count == 1:
                        await state.set_state(AddReminderPills.first_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.first_take]}", reply_markup=replies.cancel_kb())
                    elif count == 2:
                        await state.set_state(AddReminderPills.sec_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.sec_take]}", reply_markup=replies.cancel_kb())
                    elif count == 3:
                        await state.set_state(AddReminderPills.third_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.third_take]}", reply_markup=replies.cancel_kb())
                    elif count == 4:
                        await state.set_state(AddReminderPills.four_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.four_take]}", reply_markup=replies.cancel_kb())
                    elif count == 5:
                        await state.set_state(AddReminderPills.five_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.five_take]}", reply_markup=replies.cancel_kb())
                    elif count == 6:
                        await state.set_state(AddReminderPills.six_take)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n"
                            f"{AddReminderPills.texts[AddReminderPills.six_take]}", reply_markup=replies.cancel_kb())
                else:
                    await state.set_state(prev)
                    await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
                    if step == AddReminderPills.freq_days:
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev.state]}",
                            reply_markup=replies.cancel_kb())
                    elif step == AddReminderPills.freq_per_day:
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev.state]}",
                            reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar())
                    elif step == AddReminderPills.interval:
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev.state]}",
                            reply_markup=replies.repeatability_kb())
                    elif step == AddReminderPills.day_start:
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev.state]}",
                            reply_markup=replies.repeatability_kb())
                    else:
                        if (cur_state == AddReminderPills.sec_take or cur_state == AddReminderPills.third_take or
                                cur_state == AddReminderPills.four_take or cur_state == AddReminderPills.five_take or
                                cur_state == AddReminderPills.six_take):
                            data = await state.get_data()
                            takes_time = data['first_take']
                            takes_time.pop()
                            await state.update_data(first_take=takes_time)
                        await query.message.edit_text(
                            f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderPills.texts[prev.state]}",
                            reply_markup=replies.back_cancel_kb())
                    return
            prev = step
    else:
        if cur_state == AddReminderDoctor.speciality:
            await query.message.edit_text("‚ùóÔ∏è<b>–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç</b>\n –í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            await query.answer("‚ùóÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç.Ô∏è\n –í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"")
            return

        prev = None
        for step in AddReminderDoctor.__all_states__:
            if step == cur_state:
                await state.set_state(prev)
                await query.answer("‚ùóÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É ‚ùóÔ∏è")
                if step == AddReminderDoctor.name_clinic:
                    await query.message.edit_text(
                        f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderDoctor.texts[prev.state]}",
                        reply_markup=replies.cancel_kb()
                    )
                elif step == AddReminderDoctor.time:
                    await query.message.edit_text(
                        f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderDoctor.texts[prev.state]}",
                        reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar()
                    )
                else:
                    await query.message.edit_text(
                        f"‚ùóÔ∏è<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</b>\n\n{AddReminderDoctor.texts[prev.state]}",
                        reply_markup=replies.back_cancel_kb()
                    )
                return
            prev = step


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "skip"))
async def skip(query: CallbackQuery, state: FSMContext, session: AsyncSession):
    cur_state = await state.get_state()
    if cur_state == AddReminderPills.extra_inf:
        await state.update_data(extra_inf=str("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç"))
        try:
            await state.update_data(chat_id=str(query.message.chat.id))
            data = await state.get_data()
            takes_time = data["first_take"]
            takes_time = [dt + timedelta(days=2) for dt in takes_time]
            if data["freq_per_day"] >= 1:
                await state.update_data(first_take=takes_time[0])
                if data["freq_per_day"] >= 2:
                    await state.update_data(sec_take=takes_time[1])
                    if data["freq_per_day"] >= 3:
                        await state.update_data(third_take=takes_time[2])
                        if data["freq_per_day"] >= 4:
                            await state.update_data(four_take=takes_time[3])
                            if data["freq_per_day"] >= 5:
                                await state.update_data(five_take=takes_time[4])
                                if data["freq_per_day"] == 6:
                                    await state.update_data(six_take=takes_time[5])
                                else:
                                    await state.update_data(six_take=None)
                            else:
                                await state.update_data(five_take=None)
                                await state.update_data(six_take=None)
                        else:
                            await state.update_data(four_take=None)
                            await state.update_data(five_take=None)
                            await state.update_data(six_take=None)
                    else:
                        await state.update_data(third_take=None)
                        await state.update_data(four_take=None)
                        await state.update_data(five_take=None)
                        await state.update_data(six_take=None)
                else:
                    await state.update_data(sec_take=None)
                    await state.update_data(third_take=None)
                    await state.update_data(four_take=None)
                    await state.update_data(five_take=None)
                    await state.update_data(six_take=None)
            data1 = await state.get_data()
            await orm_pills_remind(session, data1)
            await query.message.answer("‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\nüîî–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
                             "‚ùï–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ (UTC/GMT +05:00) Asia/Yekaterinburg",
                                 reply_markup=replies.start_kb())
            await state.clear()
        except Exception as e:
            await query.message.answer(f"–û—à–∏–±–∫–∞: \n{str(e)}\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                                 reply_markup=replies.start_kb())
            await state.clear()
    elif cur_state == AddReminderDoctor.extra_inf_doctor:
        await state.update_data(extra_inf_doctor=str("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç"))
        try:
            await state.update_data(chat_id=str(query.message.chat.id))
            data = await state.get_data()
            await orm_doctor_remind(session, data)
            await query.message.edit_text("‚ùó–í–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω\n\n‚úÖ<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
                                          "</b>\n\nüîî–í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞, –∑–∞ 1 —á–∞—Å –∏ –≤ –º–æ–º–µ–Ω—Ç"
                                          " –ø—Ä–∏–µ–º–∞",
                                          reply_markup=replies.start_kb())
            await state.clear()
        except Exception as e:
            await query.message.answer(f"–û—à–∏–±–∫–∞: \n{str(e)}\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                                       reply_markup=replies.start_kb())
            await state.clear()
    else:
        await query.message.answer("‚ùó–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–¥–∏–∏ —É–∫–∞–∑–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "look"))
async def reminds_list(query: CallbackQuery, session: AsyncSession):
    await query.message.delete()
    await query.answer("üìã–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π‚¨Ü\n\n‚ùï–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É")

    doctor_reminds = await orm_get_reminds_doctor(session)
    pill_reminds = await orm_get_reminds_pill(session)

    if not doctor_reminds and not pill_reminds:
        await query.message.answer("‚ùó–£ –í–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", reply_markup=replies.no_reminders_kb())
        await query.answer("‚ùó–£ –í–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return
    else:
        for remind in await orm_get_reminds_doctor(session):
            if int(remind.chat_id) == query.message.chat.id:
                dt_user = await convert_from_yekaterinburg(session, remind.chat_id, remind.date)
                date = dt_user.strftime(f"%d.%m.%Y")
                time = dt_user.strftime(f"%H:%M")
                await query.message.answer(f"ü©∫–í—Ä–∞—á:<b> {remind.speciality}</b>\nüè•–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞:"
                                           f" {remind.name_clinic}\n<b>üóì{date} –≤ {time}</b> –≤ –∫–∞–±–∏–Ω–µ—Ç–µ "
                                           f"<b>{remind.cabinet}</b>\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {remind.extra_inf_doctor}",
                                           reply_markup=replies.get_btns(btns={
                                               '–£–¥–∞–ª–∏—Ç—å üöÆ': f'delete_{remind.id}'}))
        for remind in await orm_get_reminds_pill(session):
            if int(remind.chat_id) == query.message.chat.id:
                date = remind.day_start.strftime(f"%d.%m.%Y")
                if remind.freq_per_day >= 1:
                    time1 = remind.first_take.strftime(f"%H:%M")
                    if remind.freq_per_day >= 2:
                        time2 = remind.sec_take.strftime(f"%H:%M")
                        if remind.freq_per_day >= 3:
                            time3 = remind.third_take.strftime(f"%H:%M")
                            if remind.freq_per_day >= 4:
                                time4 = remind.four_take.strftime(f"%H:%M")
                                if remind.freq_per_day >= 5:
                                    time5 = remind.five_take.strftime(f"%H:%M")
                                    if remind.freq_per_day >= 6:
                                        time6 = remind.six_take.strftime(f"%H:%M")
                if remind.freq_per_day == 1:
                    await query.message.answer(f"<strong>üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {remind.name}\nüìã–ü—Ä–∏–µ–º {remind.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                               f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {remind.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                               f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {remind.extra_inf}",
                                               reply_markup=replies.get_btns(btns={
                                                   '–£–¥–∞–ª–∏—Ç—å üöÆ': f'delete_{remind.id}'}))
                elif remind.freq_per_day == 2:
                    await query.message.answer(f"<strong>üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {remind.name}\nüóì–ü—Ä–∏–µ–º {remind.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                               f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {remind.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                               f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}\n2. {time2}"
                                               f"\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {remind.extra_inf}",
                                               reply_markup=replies.get_btns(btns={
                                                   '–£–¥–∞–ª–∏—Ç—å üöÆ': f'delete_{remind.id}'}))
                elif remind.freq_per_day == 3:
                    await query.message.answer(f"<strong>üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {remind.name}\nüóì–ü—Ä–∏–µ–º {remind.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                               f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {remind.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                               f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}\n2. {time2}\n3. {time3}"
                                               f"\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {remind.extra_inf}",
                                               reply_markup=replies.get_btns(btns={
                                                   '–£–¥–∞–ª–∏—Ç—å üöÆ': f'delete_{remind.id}'}))
                elif remind.freq_per_day == 4:
                    await query.message.answer(f"<strong>üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {remind.name}\nüóì–ü—Ä–∏–µ–º {remind.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                               f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {remind.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                               f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}\n2. {time2}\n3. {time3}\n4. {time4}"
                                               f"\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {remind.extra_inf}",
                                               reply_markup=replies.get_btns(btns={
                                                   '–£–¥–∞–ª–∏—Ç—å üöÆ': f'delete_{remind.id}'}))
                elif remind.freq_per_day == 5:
                    await query.message.answer(f"<strong>üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {remind.name}\nüóì–ü—Ä–∏–µ–º {remind.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                               f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {remind.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                               f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}\n2. {time2}\n3. {time3}\n4. {time4}\n5. {time5}"
                                               f"\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {remind.extra_inf}",
                                               reply_markup=replies.get_btns(btns={
                                                   '–£–¥–∞–ª–∏—Ç—å üöÆ': f'delete_{remind.id}'}))
                elif remind.freq_per_day == 6:
                    await query.message.answer(f"<strong>üíä–ü—Ä–µ–ø–∞—Ä–∞—Ç: {remind.name}\nüóì–ü—Ä–∏–µ–º {remind.freq_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                               f" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {remind.freq_days} –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å {date}</strong>"
                                               f"\n‚è∞–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:\n1. {time1}\n2. {time2}\n3. {time3}\n4. {time4}\n5. {time5}\n6. {time6}"
                                               f"\n‚ÑπÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {remind.extra_inf}",
                                               reply_markup=replies.get_btns(btns={
                                                   '–£–¥–∞–ª–∏—Ç—å üöÆ': f'delete_{remind.id}'}))
        await query.message.answer("‚ùó–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤—ã—à–µ ‚¨ÜÔ∏è"
                                   "\n\nüìù–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É"
                                   "\n\n‚ùï–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ (UTC/GMT +05:00) Asia/Yekaterinburg, "
                                   "–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤!",
                                   reply_markup=replies.back_only_for_look_kb())


@user_private_router.callback_query(F.data.startswith('delete_'))
async def delete_remind(query: types.CallbackQuery, session: AsyncSession):
    remind_id = query.data.split("_")[-1]
    await orm_delete_remind(session, int(remind_id))
    await query.message.edit_text("‚ùó–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    await query.answer("‚ùó–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")


@user_private_router.callback_query(StateFilter('*'), MyCallback.filter(F.name == "create"))
async def create(query: CallbackQuery):
    await query.message.delete()
    await query.message.answer("‚ùî–ö–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?", reply_markup=replies.create_kb())


''' 
 –•–≠–ù–î–õ–ï–†–´ –ù–ê –ü–†–ò–Å–ú -----------------------------------------------------------------------------------------------------
'''


@user_private_router.callback_query(StateFilter(None), MyCallback.filter(F.name == "doctor"))
async def doctor(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text("üñãÔ∏è–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É\n\nü©∫<b>–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞</b>", reply_markup=replies.cancel_kb())
    await state.set_state(AddReminderDoctor.speciality)


@user_private_router.message(StateFilter(AddReminderDoctor.speciality), F.text)
async def doctor_spec(message: types.Message, state: FSMContext):
    if len(message.text) <= 100:
        await state.update_data(speciality=message.text)
        await message.answer("üè•<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏</b>", reply_markup=replies.back_cancel_kb())
        await state.set_state(AddReminderDoctor.name_clinic)
    else:
        await message.answer("‚ùó–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤"
                             "\n\n –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ")


@user_private_router.message(AddReminderDoctor.speciality)
async def doctor_spec_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.cancel_kb())


@user_private_router.message(StateFilter(AddReminderDoctor.name_clinic), F.text)
async def doctor_clinic(message: types.Message, state: FSMContext):
    if len(message.text) <= 100:
        await state.update_data(name_clinic=message.text)
        await message.answer("üóì<b>–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞</b>",
                             reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar())
        await state.set_state(AddReminderDoctor.date)
    else:
        await message.answer("‚ùó–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤"
                             "\n\n –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ")


@user_private_router.message(AddReminderDoctor.name_clinic)
async def doctor_clinic_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.callback_query(StateFilter(AddReminderDoctor.date), SimpleCalendarCallback.filter())
async def doctor_date(query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    calendar = SimpleCalendar(
        locale=await get_user_locale(query.from_user), show_alerts=True
    )
    today_date = datetime.now()
    cur_year = int(today_date.strftime("%Y"))
    cur_month = int(today_date.strftime("%m"))
    cur_day = int(today_date.strftime("%d"))
    calendar.set_dates_range(datetime(cur_year, cur_month, cur_day), datetime(cur_year+2, 12, 31))
    selected, chosen_date = await calendar.process_selection(query, callback_data)
    if selected:
        await query.message.edit_text(f'üóì<b>–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞</b>\n\n‚ùó<b>–í—ã —É–∫–∞–∑–∞–ª–∏ {chosen_date.strftime(f"%d.%m.%Y")}</b>')

        await state.update_data(date=chosen_date)  # .strftime(f"%d.%m.%Y")
        await query.message.answer("üïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞</b>\n\n‚ùó–í–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"
                                   "\n–ù–∞–ø—Ä–∏–º–µ—Ä, 11:30, 7:30, 0:30", reply_markup=replies.back_cancel_kb())
        await state.set_state(AddReminderDoctor.time)
    return chosen_date


@user_private_router.message(AddReminderDoctor.date)
async def doctor_date_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É <i>–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.message(StateFilter(AddReminderDoctor.time), F.text)
async def doctor_time(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(4)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            current_datetime = datetime.now()
            current_time = current_datetime.strftime(f"%H:%M")
            current_date = current_datetime.strftime(f"%d/%m/%Y")
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M').time()
                data = await state.get_data()
                date = data["date"]
                date_and_time = datetime.combine(date, chosen_time)
                first_remind = date_and_time - timedelta(hours=24)
                second_remind = date_and_time - timedelta(hours=1)
                if date.strftime(f"%d/%m/%Y") == current_date:
                    if pre_time.strftime(f"%H") < current_datetime.strftime(f"%H"):
                        await message.answer(
                            f"‚ùó–í—ã —É–∫–∞–∑–∞–ª–∏ <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ</b> –≤—Ä–µ–º—è\n<b>–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ {current_time}</b>"
                            f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
                    elif pre_time.strftime(f"%H") == current_datetime.strftime(f"%H"):
                        if pre_time.strftime(f"%M") <= current_datetime.strftime(f"%M"):
                            await message.answer(
                                f"‚ùó–í—ã —É–∫–∞–∑–∞–ª–∏ <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ</b> –≤—Ä–µ–º—è\n<b>–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ {current_time}</b>"
                                f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
                        else:
                            await state.update_data(date=date_and_time)
                            await state.update_data(time=first_remind)
                            await state.update_data(sec_time=second_remind)
                            await message.answer("üö™<b>–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞</b>", reply_markup=replies.back_cancel_kb())
                            await state.set_state(AddReminderDoctor.cabinet)
                    else:
                        await state.update_data(date=date_and_time)
                        await state.update_data(time=first_remind)
                        await state.update_data(sec_time=second_remind)
                        await message.answer("üö™<b>–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞</b>", reply_markup=replies.back_cancel_kb())
                        await state.set_state(AddReminderDoctor.cabinet)
                else:
                    await state.update_data(date=date_and_time)
                    await state.update_data(time=first_remind)
                    await state.update_data(sec_time=second_remind)
                    await message.answer("üö™<b>–£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞</b>", reply_markup=replies.back_cancel_kb())
                    await state.set_state(AddReminderDoctor.cabinet)
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderDoctor.time)
async def doctor_time_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <b>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b>", reply_markup=replies.back_cancel_kb())


@user_private_router.message(StateFilter(AddReminderDoctor.cabinet), F.text)
async def doctor_cabinet(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if len(message.text) <= 100:
            await state.update_data(cabinet=message.text)
            await message.answer(
                "‚ÑπÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –§–ò–û –≤—Ä–∞—á–∞, –∞–¥—Ä–µ—Å –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏"
                ", –∏ –ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
            await state.set_state(AddReminderDoctor.extra_inf_doctor)
        else:
            await message.answer("‚ùó–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤"
                                 "\n\n –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ")
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</i>",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderDoctor.cabinet)
async def doctor_cabinet_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.message(StateFilter(AddReminderDoctor.extra_inf_doctor), F.text)
async def doctor_extra(message: types.Message, state: FSMContext, session: AsyncSession):
    if len(message.text) <= 250:
        await state.update_data(extra_inf_doctor=message.text)
        try:
            await state.update_data(chat_id=str(message.chat.id))
            data = await state.get_data()
            await orm_doctor_remind(session, data)
            await message.answer("‚úÖ<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>\n\nüîî–í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞, –∑–∞ 1 —á–∞—Å –∏ –≤ "
                                 "–º–æ–º–µ–Ω—Ç –ø—Ä–∏–µ–º–∞", reply_markup=replies.start_kb())
            await state.clear()
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: \n{str(e)}\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                                 reply_markup=replies.start_kb())
            await state.clear()
    else:
        await message.answer("‚ùó–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 250 —Å–∏–º–≤–æ–ª–æ–≤"
                             "\n\n –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ")


@user_private_router.message(AddReminderDoctor.extra_inf_doctor)
async def doctor_extra_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.back_cancel_kb())


''' 
 –•–≠–ù–î–õ–ï–†–´ –ù–ê –õ–ï–ö–ê–†–°–¢–í–ê--------------------------------------------------------------------------------------------------
'''


@user_private_router.callback_query(StateFilter(None), MyCallback.filter(F.name == "pills"))
async def pills(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "üñãÔ∏è–ü—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤\n\n<b>üíä–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</b>", reply_markup=replies.cancel_kb())
    await state.set_state(AddReminderPills.name)


@user_private_router.message(AddReminderPills.name, F.text)
async def pill_name(message: types.Message, state: FSMContext):
    if len(message.text) <= 100:
        await state.update_data(name=message.text)
        await message.answer("üóìÔ∏è<b>–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ</b>", reply_markup=replies.back_cancel_kb())
        await state.set_state(AddReminderPills.freq_days)
    else:
        await message.answer("‚ùó–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤"
                             "\n\n –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ")


@user_private_router.message(AddReminderPills.name)
async def pill_name_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.cancel_kb())


@user_private_router.message(AddReminderPills.freq_days, F.text)
async def pill_periodicity(message: types.Message, state: FSMContext):#
    mess = message.text
    if mess.isdigit():
        if int(mess) == 1:
            await state.update_data(freq_days=int(mess))
            await message.answer("üóìÔ∏è<b>–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞</b>",
                                       reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar())
            await state.set_state(AddReminderPills.day_start)
        elif 1 < int(mess) <= 30:
            await state.update_data(freq_days=int(mess))
            await message.answer("üìÖ<b>–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ?</b>",
            reply_markup=replies.repeatability_kb())
            await state.set_state(AddReminderPills.periodicity)
        if int(mess) > 30 or int(mess) <= 0:
            await message.answer("‚ùó–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π <b>–Ω–µ –º–æ–∂–µ—Ç</b> –±—ã—Ç—å –±–æ–ª—å—à–µ 30 –∏–ª–∏ –º–µ–Ω—å—à–µ 1"
                                 "\n–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <i>—Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</i>",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.freq_days)
async def pill_periodicity_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <i>—Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</i>",
                         reply_markup=replies.cancel_kb())


@user_private_router.callback_query(AddReminderPills.periodicity, MyCallback.filter(F.name == "every_few_days"))
async def pill_every_few_days(query: CallbackQuery, callback_data: MyCallback, state: FSMContext):
    periodicity = callback_data.name
    if periodicity == "every_few_days":
        await state.update_data(periodicity=2)
    await query.message.delete()
    await query.message.answer("üóìÔ∏è<b>–ö–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É –¥–Ω—è–º–∏ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞?</b>",
                               reply_markup=replies.back_cancel_kb())
    await state.set_state(AddReminderPills.interval)


@user_private_router.callback_query(AddReminderPills.periodicity, MyCallback.filter(F.name.in_(["every_day", "every_other_day"])))
async def pill_freq_days(query: CallbackQuery, callback_data: MyCallback, state: FSMContext):
    periodicity = callback_data.name
    if periodicity == "every_day":
        await state.update_data(periodicity=0)
    elif periodicity == "every_other_day":
        await state.update_data(periodicity=1)

    await query.message.delete()
    await query.message.answer("üóìÔ∏è<b>–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞</b>",
                         reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar())
    await state.set_state(AddReminderPills.day_start)


@user_private_router.message(AddReminderPills.periodicity)
async def pill_freq_days_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <i>—Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</i>",
                         reply_markup=replies.cancel_kb())


@user_private_router.message(AddReminderPills.interval)
async def pill_freq_days(message: types.Message, state: FSMContext):
    mess = message.text
    if mess.isdigit():
        interval = int(mess)
        if 1 < interval <= 7:
            await state.update_data(interval=interval)
            await message.answer("üóìÔ∏è<b>–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞</b>",
                                       reply_markup=await SimpleCalendar(locale='ru_Ru').start_calendar())
            await state.set_state(AddReminderPills.day_start)
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ <i>–æ—Ç 2 –¥–æ 7</i>")
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ <i>–æ—Ç 2 –¥–æ 7</i>")


@user_private_router.callback_query(StateFilter(AddReminderPills.day_start), SimpleCalendarCallback.filter())
async def pill_day_start(query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    calendar = SimpleCalendar(
        locale=await get_user_locale(query.from_user), show_alerts=True
    )
    today_date = datetime.now()
    cur_year = int(today_date.strftime("%Y"))
    cur_month = int(today_date.strftime("%m"))
    cur_day = int(today_date.strftime("%d"))
    calendar.set_dates_range(datetime(cur_year, cur_month, cur_day), datetime(cur_year+2, 12, 31))
    selected, chosen_date = await calendar.process_selection(query, callback_data)
    chosen_date = chosen_date
    if selected:
        await query.message.edit_text(f'üóìÔ∏è<b>–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞</b>\n\n‚ùó<b>–í—ã —É–∫–∞–∑–∞–ª–∏ '
                                      f'{chosen_date.strftime(f"%d.%m.%Y")}</b>')
        await state.update_data(day_start=chosen_date)
        await query.message.answer("üî¢<b>–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ</b>",
                                   reply_markup=replies.back_cancel_kb())
        await state.set_state(AddReminderPills.freq_per_day)
    return chosen_date


@user_private_router.message(AddReminderPills.day_start)
async def pill_day_start_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É <i>–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.freq_per_day, F.text)
async def pill_freq_per_day(message: types.Message, state: FSMContext):
    mess = message.text
    if mess.isdigit():
        if 6 >= int(mess) > 0:
            await state.update_data(freq_per_day=int(message.text))
            await message.answer("1Ô∏è‚É£<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 1 –ø—Ä–∏–µ–º–∞</b>\n\n‚ùó–í–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"
                                 "\n–ù–∞–ø—Ä–∏–º–µ—Ä, 11:30, 7:30, 0:30\n\n‚ùï–í—Ä–µ–º—è —Å–ª–µ–¥—É–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"
                                 " (UTC/GMT +05:00) Asia/Yekaterinburg", reply_markup=replies.back_cancel_kb())
            await state.set_state(AddReminderPills.first_take)
        if int(mess) > 6 or int(mess) <= 0:
            await message.answer("‚ùó–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –≤ –¥–µ–Ω—å <b>–Ω–µ –º–æ–∂–µ—Ç</b> –±—ã—Ç—å –±–æ–ª—å—à–µ 6 –∏–ª–∏ –º–µ–Ω—å—à–µ 1"
                                 "\n–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <i>—Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</i>",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.freq_per_day)
async def pill_freq_per_day_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</i>",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.first_take, F.text)
async def pill_first_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(4)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                takes_time = [chosen_time]
                await state.update_data(first_take=takes_time)
                data = await state.get_data()
                count = data['freq_per_day']
                if count > 1:
                    await message.answer("2Ô∏è‚É£<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 2 –ø—Ä–∏–µ–º–∞</b>", reply_markup=replies.back_cancel_kb())
                    await state.set_state(AddReminderPills.sec_take)
                else:
                    await message.answer("‚ÑπÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>\n\n"
                                         "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, —Ç–æ, –∫–∞–∫ –µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–æ—á—É—é"
                                         " –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                    await state.set_state(AddReminderPills.extra_inf)
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.first_take)
async def pill_first_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ", reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.sec_take, F.text)
async def pill_sec_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(4)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                data = await state.get_data()
                count = data['freq_per_day']
                takes_time = data['first_take']
                hit_counter = 0
                for i in range(len(takes_time)):
                    if takes_time[i] == chosen_time:
                        hit_counter += 1
                if hit_counter == 0:
                    takes_time.append(chosen_time)
                    await state.update_data(first_take=takes_time)
                    if count > 2:
                        await message.answer("3Ô∏è‚É£<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 3 –ø—Ä–∏–µ–º–∞</b>", reply_markup=replies.back_cancel_kb())
                        await state.set_state(AddReminderPills.third_take)
                    else:
                        await message.answer("‚ÑπÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>\n\n"
                                         "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, —Ç–æ, –∫–∞–∫ –µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–æ—á—É—é"
                                         " –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                        await state.set_state(AddReminderPills.extra_inf)
                else:
                    await message.answer("‚ùó–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ <b>–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å</b> —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º,"
                                         " –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ\nüïí–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", reply_markup=replies.back_cancel_kb())
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i>",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.sec_take)
async def pill_sec_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i>",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.third_take, F.text)
async def pill_third_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(4)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                data = await state.get_data()
                count = data['freq_per_day']
                takes_time = data['first_take']
                hit_counter = 0
                for i in range(len(takes_time)):
                    if takes_time[i] == chosen_time:
                        hit_counter += 1
                if hit_counter == 0:
                    takes_time.append(chosen_time)
                    await state.update_data(first_take=takes_time)
                    if count > 3:
                        await message.answer("4Ô∏è‚É£<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 4 –ø—Ä–∏–µ–º–∞</b>", reply_markup=replies.back_cancel_kb())
                        await state.set_state(AddReminderPills.four_take)
                    else:
                        await message.answer("‚ÑπÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>\n\n"
                                         "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, —Ç–æ, –∫–∞–∫ –µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–æ—á—É—é"
                                         " –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                        await state.set_state(AddReminderPills.extra_inf)
                else:
                    await message.answer("‚ùó–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ <b>–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å</b> —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º,"
                                         " –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ\nüïí–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", reply_markup=replies.back_cancel_kb())
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.third_take)
async def pill_third_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i>",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.four_take, F.text)
async def pill_four_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(4)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                data = await state.get_data()
                count = data['freq_per_day']
                takes_time = data['first_take']
                hit_counter = 0
                for i in range(len(takes_time)):
                    if takes_time[i] == chosen_time:
                        hit_counter += 1
                if hit_counter == 0:
                    takes_time.append(chosen_time)
                    await state.update_data(first_take=takes_time)
                    if count > 4:
                        await message.answer("5Ô∏è‚É£<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 5 –ø—Ä–∏–µ–º–∞</b>", reply_markup=replies.back_cancel_kb())
                        await state.set_state(AddReminderPills.five_take)
                    else:
                        await message.answer("‚ÑπÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>\n\n"
                                         "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, —Ç–æ, –∫–∞–∫ –µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–æ—á—É—é"
                                         " –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                        await state.set_state(AddReminderPills.extra_inf)
                else:
                    await message.answer("‚ùó–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ <b>–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å</b> —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º,"
                                         " –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ\nüïí–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", reply_markup=replies.back_cancel_kb())
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.four_take)
async def pill_four_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i>",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.five_take, F.text)
async def pill_five_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(5)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                data = await state.get_data()
                count = data['freq_per_day']
                takes_time = data['first_take']
                hit_counter = 0
                for i in range(len(takes_time)):
                    if takes_time[i] == chosen_time:
                        hit_counter += 1
                if hit_counter == 0:
                    takes_time.append(chosen_time)
                    await state.update_data(first_take=takes_time)
                    if count > 5:
                        await message.answer("6Ô∏è‚É£<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è 6 –ø—Ä–∏–µ–º–∞</b>", reply_markup=replies.back_cancel_kb())
                        await state.set_state(AddReminderPills.six_take)
                    else:
                        await message.answer("‚ÑπÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>\n\n"
                                         "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, —Ç–æ, –∫–∞–∫ –µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–æ—á—É—é"
                                         " –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                        await state.set_state(AddReminderPills.extra_inf)
                else:
                    await message.answer("‚ùó–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ <b>–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å</b> —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º,"
                                         " –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ\nüïí–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", reply_markup=replies.back_cancel_kb())
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.five_take)
async def pill_five_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.six_take, F.text)
async def pill_six_take(message: types.Message, state: FSMContext):
    message_text = message.text
    if len(message_text) <= 2:
        message_text = message_text.zfill(5)
    elif message_text[2] != ":":
        if message_text[1] == ":":
            message_text = message_text.zfill(5)

    if message_text[:2].isdigit() and message_text[3:5].isdigit() and message_text[2] == ":":
        hours_minutes = message_text.split(":")
        if len(hours_minutes[1]) == 2:
            chosen_hour = int(hours_minutes[0])
            chosen_minute = int(hours_minutes[1])
            if (chosen_hour < 0) or (chosen_hour >= 24):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí</b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            elif (chosen_minute < 0) or (chosen_minute >= 60):
                await message.answer("‚ùó<b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>"
                                     f"\nüïí<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ</b>", reply_markup=replies.back_cancel_kb())
            else:
                pre_time = datetime.strptime(message_text, f"%H:%M")
                last_pre_time = pre_time.strftime(f"%H:%M")
                chosen_time = datetime.strptime(last_pre_time, '%H:%M')
                data = await state.get_data()
                takes_time = data['first_take']
                hit_counter = 0
                for i in range(len(takes_time)):
                    if takes_time[i] == chosen_time:
                        hit_counter += 1
                if hit_counter == 0:
                    takes_time.append(chosen_time)
                    await state.update_data(first_take=takes_time)
                    await message.answer("‚ÑπÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>\n\n"
                                         "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, —Ç–æ, –∫–∞–∫ –µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–æ—á—É—é"
                                         " –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=replies.skip_bk_cl_kb())
                    await state.set_state(AddReminderPills.extra_inf)
                else:
                    await message.answer("‚ùó–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ <b>–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å</b> —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º,"
                                         " –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ\nüïí–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", reply_markup=replies.back_cancel_kb())
        else:
            await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                                 reply_markup=replies.back_cancel_kb())
    else:
        await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                             reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.six_take)
async def pill_six_take_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i> ",
                         reply_markup=replies.back_cancel_kb())


@user_private_router.message(AddReminderPills.extra_inf, F.text)
async def pill_extra(message: types.Message, state: FSMContext, session: AsyncSession):
    if len(message.text) <= 250:
        await state.update_data(extra_inf=message.text)
        try:
            await state.update_data(chat_id=str(message.chat.id))
            data = await state.get_data()
            takes_time = data["first_take"]
            takes_time = [dt + timedelta(days=45656) for dt in takes_time]
            await message.answer(f"{takes_time}")
            if data["freq_per_day"] >= 1:
                await state.update_data(first_take=takes_time[0])
                if data["freq_per_day"] >= 2:
                    await state.update_data(sec_take=takes_time[1])
                    if data["freq_per_day"] >= 3:
                        await state.update_data(third_take=takes_time[2])
                        if data["freq_per_day"] >= 4:
                            await state.update_data(four_take=takes_time[3])
                            if data["freq_per_day"] >= 5:
                                await state.update_data(five_take=takes_time[4])
                                if data["freq_per_day"] == 6:
                                    await state.update_data(six_take=takes_time[5])
                                else:
                                    await state.update_data(six_take=None)
                            else:
                                await state.update_data(five_take=None)
                                await state.update_data(six_take=None)
                        else:
                            await state.update_data(four_take=None)
                            await state.update_data(five_take=None)
                            await state.update_data(six_take=None)
                    else:
                        await state.update_data(third_take=None)
                        await state.update_data(four_take=None)
                        await state.update_data(five_take=None)
                        await state.update_data(six_take=None)
                else:
                    await state.update_data(sec_take=None)
                    await state.update_data(third_take=None)
                    await state.update_data(four_take=None)
                    await state.update_data(five_take=None)
                    await state.update_data(six_take=None)
            data1 = await state.get_data()
            await orm_pills_remind(session, data1)
            await message.answer("‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\nüîî–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
                                 "‚ùï–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ (UTC/GMT +05:00) Asia/Yekaterinburg",
                                 reply_markup=replies.start_kb())
            await state.clear()
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: \n{str(e)}\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                                 reply_markup=replies.start_kb())
            await state.clear()
    else:
        await message.answer("‚ùó–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 250 —Å–∏–º–≤–æ–ª–æ–≤"
                             "\n\n –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ")


@user_private_router.message(AddReminderPills.extra_inf)
async def pill_extra_err(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n–£–∫–∞–∂–∏—Ç–µ <i>—Ç–µ–∫—Å—Ç–æ–º</i>", reply_markup=replies.back_cancel_kb())


@user_private_router.message()  # –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –ª–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç
async def stuff(message: types.Message):
    await message.answer("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫")
