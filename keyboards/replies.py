from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData


class MyCallback(CallbackData, prefix="my"):
    name: str


def start_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚è∞", callback_data=MyCallback(name="create").pack()),
        InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üìö", callback_data=MyCallback(name="look").pack()),
        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å üï∞", callback_data=MyCallback(name="timezone_new").pack()),
    )
    return builder.adjust(1).as_markup()


def repeatability_kb():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ö–∞–∂–¥—ã–π –¥–µ–Ω—å üîÅ", callback_data=MyCallback(name="every_day").pack()),)
    builder.row(InlineKeyboardButton(text="–î–µ–Ω—å —á–µ—Ä–µ–∑ –¥–µ–Ω—å üîÇ", callback_data=MyCallback(name="every_other_day").pack()),)
    builder.row(InlineKeyboardButton(text="–†–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π ‚§¥Ô∏è", callback_data=MyCallback(name="every_few_days").pack()),)
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=MyCallback(name="back").pack()),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data=MyCallback(name="cancel").pack()),
    )
    return builder.as_markup()


def no_reminders_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚è∞", callback_data=MyCallback(name="create").pack()),
    )
    return builder.as_markup()


def create_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É üè•", callback_data=MyCallback(name="doctor").pack()),
        InlineKeyboardButton(text="–ü—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤ üíä", callback_data=MyCallback(name="pills").pack()),
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=MyCallback(name="start").pack()),
    )
    return builder.adjust(1).as_markup()


def back_only_for_look_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=MyCallback(name="start").pack()),
    )
    return builder.as_markup()


def back_cancel_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=MyCallback(name="back").pack()),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data=MyCallback(name="cancel").pack()),
    )
    return builder.as_markup()


def skip_bk_cl_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=MyCallback(name="back").pack()),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data=MyCallback(name="cancel").pack()),
    )
    builder.row(
        InlineKeyboardButton(text="–ë–µ–∑ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚û°Ô∏è", callback_data=MyCallback(name="skip").pack()),
    )
    return builder.as_markup()


def cancel_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data=MyCallback(name="cancel").pack()),
    )
    return builder.as_markup()


def get_btns(
    *,
    btns: dict[str, str],
    sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))
    return keyboard.adjust(*sizes).as_markup()
